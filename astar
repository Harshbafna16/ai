def a_star(start, goal):
    open_set, closed_set = set([start]), set()
    g, parents = {start: 0}, {start: start}

    while open_set:
        n = min(open_set, key=lambda x: g[x] + heuristic(x))

        if n == goal:
            path = []
            while parents[n] != n:
                path.append(n)
                n = parents[n]
            path.append(start)
            print("Path found:", path[::-1])
            return path

        for m, w in Graph_nodes.get(n, []):
            if m not in open_set | closed_set or g[m] > g[n] + w:
                g[m], parents[m] = g[n] + w, n
                open_set.add(m)

        open_set.remove(n)
        closed_set.add(n)

    print("Path does not exist!")
    return None

def heuristic(n):
    return {'A':11, 'B':6, 'C':5, 'D':7, 'E':3, 'F':6, 'G':5, 'H':3, 'I':1, 'J':0}[n]

Graph_nodes = {
    'A': [('B', 6), ('F', 3)],
    'B': [('A', 6), ('C', 3), ('D', 2)],
    'C': [('B', 3), ('D', 1), ('E', 5)],
    'D': [('B', 2), ('C', 1), ('E', 8)],
    'E': [('C', 5), ('D', 8), ('I', 5), ('J', 5)],
    'F': [('A', 3), ('G', 1), ('H', 7)],
    'G': [('F', 1), ('I', 3)],
    'H': [('F', 7), ('I', 2)],
    'I': [('E', 5), ('G', 3), ('H', 2), ('J', 3)],
}

a_star('A', 'J')
